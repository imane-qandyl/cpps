This module focuses on how to work with containers, 
template programming, iterators, and algorithms in C++â€”essentially 
teaching you to use the Standard Template Library (STL) 

when something unexpected occurs, you "throw away" the issue by sending an error message.

So, in simple terms, if you try to divide by zero (which is not allowed in math), 
the code throws an exception with the error message. 
The catch block then catches this exception and displays the error message.



A container: is a class that stores multiple elements.

A templated container: uses templates to handle any data type, making it generic and reusable

An iterator: is like a pointer used to move through a container's elements.



Examples in STL:

std::vector<T>

std::list<T>

std::deque<T>

std::map<Key, Value>

STL provides ready-to-use algorithms to manipulate containers using iterators:

std::find()

std::sort()

std::count()

begin()

std::copy()




wx02

Array in c++
-> arrays are created in c++ in a contiguous form
-> how is a index calculated in a array is using (name of the array variable) + index * sizeof(the variable type)
using the standard array library we can access the 



An empty container contains no data so we need to add into it:
    - you can traverse the container in particular direction
        - by defining a begin and end which allows us to create a special object
            called iterator which allows us to identify one of the element in the array.


Stack container
    - unlike vector or any other containers, stack can not be accessed through their index rather only the top
        of the stack. That's why it is not iterable. (.top())
    - We cannot add elements during its declaration such as stack<string> car = {"Mercedes", "Ford", "toyota"};
    - to add elements to the top we use .push() and to remove the element from the top we use .pop()