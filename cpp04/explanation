class Dog : public Animal {
public:
    void makeSound() const override {
        std::cout << "Woof!" << std::endl;
    }
};

class Cat : public Animal {
public:
    void makeSound() const override {
        std::cout << "Meow!" << std::endl;
    }
};

inat main()
{
    //Without virtual
    Animal* a = new Dog();
    a->makeSound(); // ❌ Calls Animal::makeSound(), not Dog::makeSound()
    delete a; // ❌ Only Animal destructor is called; Dog resources may not be cleaned

    //With virtual
    Animal* a = new Dog();
    a->makeSound(); // ✅ Calls Dog::makeSound()
    delete a; // ✅ Dog destructor is called first, then Animal destructor


//     Use virtual: When you want to override a method in child classes.
}
